"""
------------------------------------------------------------
Final Exam Testing
------------------------------------------------------------

------------------------------------------------------------
"""
------------------------------------------------------------
test_BST
------------------------------------------------------------

BST_linked Testing
------------------------------------------------------------
Test 'are_siblings'

  Preorder: [11, 7, 6, 9, 8, 15, 12, 18]
  are_siblings(11, 15): False
  are_siblings(7, 15): True
  are_siblings(7, 18): False
------------------------------------------------------------
Test 'longest_path'

  Preorder: []
  Max Path: []

  Preorder: [11]
  Max Path: [11]

  Preorder: [11, 7, 6, 9, 8, 15, 12, 18]
  Max Path: [11, 7, 9, 8]
------------------------------------------------------------
Test 'furthest'

  Preorder: []
  Furthest: []

  Preorder: [11]
  Furthest: [11]

  Preorder: [11, 7, 6, 9, 8, 15, 12, 18]
  Furthest: [6, 18]


------------------------------------------------------------
test_List
------------------------------------------------------------

List_linked Testing
------------------------------------------------------------
Test 'pair_count'

  List: [3, 8, 6, 7, 7, 6, 2, 2, 2, 4, 12]
  pairs: 3

------------------------------------------------------------
Test 'rotate_front'

  List: []
  After 'rotate_front': []

  List: [3]
  After 'rotate_front': [3]

  List: [3, 8, 6, 7, 7, 6, 2, 2, 2, 4, 12]
  After 'rotate_front': [8, 6, 7, 7, 6, 2, 2, 2, 4, 12, 3]

------------------------------------------------------------
Test 'rotate_rear'

  List: []
  After 'rotate_rear': []

  List: [3]
  After 'rotate_rear': [3]

  List: [3, 8, 6, 7, 7, 6, 2, 2, 2, 4, 12]
  After 'rotate_rear': [12, 3, 8, 6, 7, 7, 6, 2, 2, 2, 4]

------------------------------------------------------------
Test 'has_loop'

  List: []
  Has Loop: False

  List: [3, 8, 6, 7, 7, 6, 2, 2, 2, 4, 12]
  Has Loop: False

  source._rear._next = source._rear
  Has Loop: True

  source._front._next._next._next = source._front._next
  Has Loop: True

  source._front._next = source._front
  Has Loop: True

------------------------------------------------------------
Test 'remove_loop'

Original list
  List: [3, 8, 6, 7, 7, 6, 2, 2, 2, 4, 12]
  source._front._next._next._next = source._front._next
  List: [3, 8, 6, 8, 6, 8, 6, 8, 6, 8, 6]
Loop removed
  List: [3, 8, 6]



------------------------------------------------------------
test_Queues
------------------------------------------------------------

Queue_linked and Priority_Queue_linked Testing
------------------------------------------------------------
Test '_move_node'

    Priority_Queue': [2, 3, 4, 6, 6, 6, 7, 8]
    node: 0
    Priority_Queue': [0, 2, 3, 4, 6, 6, 6, 7, 8]
    node: 99
    Priority_Queue': [0, 2, 3, 4, 6, 6, 6, 7, 8, 99]
    node: 5
    Priority_Queue': [0, 2, 3, 4, 5, 6, 6, 6, 7, 8, 99]
------------------------------------------------------------
Test 'sum_consecutive'

  Queue: [3, 3, 7, 4, 4, 4, 5]
    Queue: After 'sum_consecutive': [6, 7, 12, 5]

------------------------------------------------------------
Test 'to_priority_queue'

  Queue: [3, 8, 6, 7, 6, 2, 4, 6]
    Queue: After 'to_priority_queue': []
    Priority_Queue': [2, 3, 4, 6, 6, 6, 7, 8]
    
------------------------------------------------------------
